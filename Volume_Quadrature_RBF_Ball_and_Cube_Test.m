function Volume_Quadrature_RBF_Ball_and_Cube_Test(Domain_Type,Test_Function)
%==========================================================================
%
% This function provides example calls to the function
% Volume_Quadrature_RBF_Ball.m and Volume_Quadrature_RBF_Cube.  
%
% The inputs to this function are:
%   Domain_Type: Can be either 'Ball' for the ball of volume 1 centered at
%   the origin, or 'Cube' for the unit cube (volume 1) centered at the
%   origin
%
%   Test_Function: This can be 1, 2, 3, or 4
%
%       If Test_Function==1, the integrand is a degree 30 trivariate
%       polynomial.
%
%       If Test_Function==2, the integrand is a shifted and scaled Gaussian
%
%       If Test_Function==3, the integrand is the sign(z)
% 
%       If Test_Function==4, the integrand is atan(5000(x^2+y^2+z^2))
%
% In all cases this function plots the error in the approximation of the
% definite integral of the integrand over the domain type and the
% computation time to construct the weights for different node set types
% and numbers of nodes.
% 
% The quadrature weights generated will be saved to a new directory on your
% drive.
%
% The node sets for the ball used here are generated by a modification to 
% the algorithm described in:
%
% P. Persson and G. Strang. A simple mesh generator in matlab. SIAM Review, 46(2):329-345,
% June 2004.
%
% The function Volume_Quadrature_RBF_Ball.m is the default implemenation of
% the method described in the preprint:
%
% J. A. Reeger. "Approximation of Definite Integrals Over the Volume of the Ball."
%
%==========================================================================
close all
gcp;
pctRunOnAll warning off all;

Domain_Type_Rotations_File_Name=[Domain_Type,'_Rotations_f_',num2str(Test_Function)];
load(Domain_Type_Rotations_File_Name);

Polynomial_Orders=[2,3];
Polynomial_Orders_String=num2str(Polynomial_Orders(1));
for Polynomial_Order_Volume_Index=2:length(Polynomial_Orders)
    Polynomial_Orders_String=[Polynomial_Orders_String,'_',num2str(Polynomial_Orders(Polynomial_Order_Volume_Index))];
end

if strcmp(Domain_Type,'Ball')
    Node_Set_Types={'Quasi_Uniform','Pseudo_Random','Clustered'};
    Node_Set_Type_Names={'Quasi-Uniform','Pseudo-Random','Clustered'};
    Max_Node_Cases=[30 28 8];
elseif strcmp(Domain_Type,'Cube')
    Node_Set_Types={'Uniform'};
    Node_Set_Type_Names={'Uniform'};
    Max_Node_Cases=[3];
end
N_Rotations=100;

if ~exist([cd,'/',Domain_Type,'_Nodes_Tetrahedra_Weights'],'dir')
    mkdir([cd,'/',Domain_Type,'_Nodes_Tetrahedra_Weights'])
end

Times=zeros(max(Max_Node_Cases),length(Polynomial_Orders),length(Node_Set_Types));
Errors=zeros(max(Max_Node_Cases),length(Polynomial_Orders),length(Node_Set_Types));
Organized_Errors_File_Name=['Organized_Errors_',Domain_Type,'_f_',num2str(Test_Function),'_Polynomial_Orders_',Polynomial_Orders_String];

Line_Colors_Errors={'r.','g.','b.','c.','k.','m.'};
Line_Colors_Orders={'ro','go','bo','co','ko','mo'};
Plot_Handles_Errors=gobjects(length(Polynomial_Orders));
Plot_Handles_Times=gobjects(length(Polynomial_Orders));
Plot_Handles_Orders=gobjects(length(Polynomial_Orders));

if exist([Organized_Errors_File_Name,'.mat'],'file')
    load([Organized_Errors_File_Name,'.mat'])
else
    for Node_Set_Type_Index=1:length(Node_Set_Types)
        figure(Node_Set_Type_Index)
        axes
        hold on
        axis square
        box on
        title({'\begin{makebox}[\linewidth]{Error When Integrating}\end{makebox}',['\begin{makebox}[\linewidth]{$f_{',num2str(Test_Function),'}(x,y,z)=',f_string,'$}\end{makebox}'],['\begin{makebox}[\linewidth]{With ',Node_Set_Type_Names{Node_Set_Type_Index},' Nodes Over the Volume of the ',Domain_Type,' (Volume 1)}\end{makebox}'],'\begin{makebox}[\linewidth]{With RBF $\phi(r)=r^{3}$ and Trivariate Polynomials Up to Order $m$.}\end{makebox}'},'interpreter','latex')
        ylabel('log$_{10}$(Error)','interpreter','latex')
        xlabel('log$_{10}(N)$','interpreter','latex')
        set(gca,'TickLabelInterpreter','latex')
        
        figure(length(Node_Set_Types)+Node_Set_Type_Index)
        axes
        hold on
        axis square
        box on
        title({'\begin{makebox}[\linewidth]{Computation Time When Integrating}\end{makebox}',['\begin{makebox}[\linewidth]{$f_{',num2str(Test_Function),'}(x,y,z)=',f_string,'$}\end{makebox}'],['\begin{makebox}[\linewidth]{With ',Node_Set_Type_Names{Node_Set_Type_Index},' Nodes Over the Volume of the ',Domain_Type,' (Volume 1)}\end{makebox}'],'\begin{makebox}[\linewidth]{With RBF $\phi(r)=r^{3}$ and Trivariate Polynomials Up to Order $m$.}\end{makebox}'},'interpreter','latex')
        ylabel('log$_{10}$(Computation Time (seconds))','interpreter','latex')
        xlabel('log$_{10}(N)$','interpreter','latex')
        set(gca,'TickLabelInterpreter','latex')
        
        for Node_Case=1:Max_Node_Cases(Node_Set_Type_Index)
            Times_File_Name=[cd,'/',Domain_Type,'_Times_',Node_Set_Types{Node_Set_Type_Index},'_Polynomial_Orders_',Polynomial_Orders_String];
            if exist([Times_File_Name,'.mat'],'file')
                load([Times_File_Name,'.mat'])
            end
            Node_Tetrahedra_File_Name=[cd,'/',Domain_Type,'_Nodes_Tetrahedra/',Domain_Type,'_Nodes_Tetrahedra_',Node_Set_Types{Node_Set_Type_Index},'_Node_Case_',num2str(Node_Case)];
            load([Node_Tetrahedra_File_Name,'.mat'])
            for Polynomial_Order_Volume_Index=1:length(Polynomial_Orders)
                N(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)=size(Quadrature_Nodes,1);
                Polynomial_Order_Volume=Polynomial_Orders(Polynomial_Order_Volume_Index);
                Number_of_Nearest_Neighbors_Volume=min(6*(Polynomial_Order_Volume+1)*(Polynomial_Order_Volume+2)*(Polynomial_Order_Volume+3)/6,N(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index));
                Node_Tetrahedra_Weights_File_Name=[cd,'/',Domain_Type,'_Nodes_Tetrahedra_Weights/',Domain_Type,'_Nodes_Tetrahedra_Weights_',Node_Set_Types{Node_Set_Type_Index},'_Node_Case_',num2str(Node_Case),'_Polynomial_Order_Volume_',num2str(Polynomial_Order_Volume)];
                if exist([Node_Tetrahedra_Weights_File_Name,'.mat'],'file') && Times(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)>0
                    fprintf('Loading Quadrature Weights for %s %s Node Case = %d and Polynomial Order = %d ... ',Domain_Type,Node_Set_Type_Names{Node_Set_Type_Index},Node_Case,Polynomial_Order_Volume)
                    load([Node_Tetrahedra_Weights_File_Name,'.mat'])
                else
                    fprintf('Computing Quadrature Weights for %s %s Node Case = %d and Polynomial Order = %d ... ',Domain_Type,Node_Set_Type_Names{Node_Set_Type_Index},Node_Case,Polynomial_Order_Volume)
                    if strcmp(Domain_Type,'Ball')
                        tic
                        Quadrature_Weights=Volume_Quadrature_RBF_Ball(Quadrature_Nodes,Tetrahedra,Polynomial_Order_Volume,Number_of_Nearest_Neighbors_Volume);
                        time=toc;
                    elseif strcmp(Domain_Type,'Cube')
                        tic
                        Quadrature_Weights=Volume_Quadrature_RBF_Cube(Quadrature_Nodes,Tetrahedra,Polynomial_Order_Volume,Number_of_Nearest_Neighbors_Volume);
                        time=toc;
                    end
                    save(Node_Tetrahedra_Weights_File_Name,'Quadrature_Nodes','Tetrahedra','Quadrature_Weights')
                    Times(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)=time;
                    save(Times_File_Name,'Times')
                end
                Errors(Node_Case,Polynomial_Order_Volume+1,Node_Set_Type_Index)=-inf;
                for Rotation_Index=1:N_Rotations
                    Quadrature_Nodes_Rotated=Quadrature_Nodes*Rotation_Matrices(:,:,Rotation_Index).';
                    Errors(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)=max(abs((Quadrature_Weights.'*f(Quadrature_Nodes_Rotated(:,1),Quadrature_Nodes_Rotated(:,2),Quadrature_Nodes_Rotated(:,3),f_params))-Exact_Integrals(Rotation_Index,1)),Errors(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index));
                end
                fprintf('Done. \n Number of Quadrature Nodes = %5.4e and Error = %5.4e\n',N(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index),Errors(Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index))
                
            end
            
            for Polynomial_Order_Volume_Index=1:length(Polynomial_Orders)
                Polynomial_Order_Volume=Polynomial_Orders(Polynomial_Order_Volume_Index);
                
                figure(Node_Set_Type_Index)
                delete(Plot_Handles_Errors(Polynomial_Order_Volume_Index))
                delete(Plot_Handles_Orders(Polynomial_Order_Volume_Index))
                Plot_Handles_Errors(Polynomial_Order_Volume_Index)=plot(log10(N(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index).'),log10(Errors(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)),[Line_Colors_Errors{Polynomial_Order_Volume_Index},'-']);
                Plot_Handles_Orders(Polynomial_Order_Volume_Index)=plot(log10(N(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index).'),log10(N(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index).^(-(Polynomial_Order_Volume+2)./3))+(log10(Errors(1,Polynomial_Order_Volume_Index,Node_Set_Type_Index))-log10(N(1,Polynomial_Order_Volume_Index,Node_Set_Type_Index).^(-(Polynomial_Order_Volume+2)./3))),[Line_Colors_Orders{Polynomial_Order_Volume_Index},'--']);
                
                figure(length(Node_Set_Types)+Node_Set_Type_Index)
                delete(Plot_Handles_Times(Polynomial_Order_Volume_Index))
                Plot_Handles_Times(Polynomial_Order_Volume_Index)=plot(log10(N(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index).'),log10(Times(1:Node_Case,Polynomial_Order_Volume_Index,Node_Set_Type_Index)),[Line_Colors_Errors{Polynomial_Order_Volume_Index},'-']);
            end
            Legend_Labels={};
            for Legend_Label_Index=1:2*length(Polynomial_Orders)
                if mod(Legend_Label_Index,2)~=0
                    Legend_Labels{Legend_Label_Index}=['$m=',num2str(Polynomial_Orders(ceil(Legend_Label_Index/2))),'$ Error'];
                else
                    Legend_Labels{Legend_Label_Index}=['O$\left(N^{-\frac{',num2str(Polynomial_Orders(ceil(Legend_Label_Index/2))),'}{3}}\right)$ Reference Line'];
                end
            end
            
            figure(Node_Set_Type_Index)
            Legend_Handle=legend(Legend_Labels);
            set(Legend_Handle,'interpreter','latex')
            drawnow
            
            Legend_Labels={};
            for Legend_Label_Index=1:length(Polynomial_Orders)
                Legend_Labels{Legend_Label_Index}=['$m=',num2str(Polynomial_Orders(Legend_Label_Index)),'$ Computation Time'];
            end
            
            figure(length(Node_Set_Types)+Node_Set_Type_Index)
            Legend_Handle=legend(Legend_Labels);
            set(Legend_Handle,'interpreter','latex')
            drawnow
            
        end
    end
    save(Organized_Errors_File_Name,'N','Errors')
end

